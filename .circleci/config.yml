# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1
orbs:
  docker: circleci/docker@2.4.0
  aws-cli: circleci/aws-cli@4.1.2
  aws-ecr: circleci/aws-ecr@9.0.1
  aws-ecs: circleci/aws-ecs@4.0.0
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build:
    working_directory: ~/repo
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/go:1.21.1
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "app/go.sum" }}
      - run:
          name: Install Dependencies
          working_directory: app/
          command: go mod download
      - save_cache:
          key: go-mod-v4-{{ checksum "app/go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Run tests
          working_directory: app/
          command: |
            mkdir -p /tmp/test-reports
            gotestsum --junitfile /tmp/test-reports/unit-tests.xml
      - store_test_results:
          path: ~/test-results

  docker_image:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - docker/build:
          docker-context: app/
          image: ${AWS_ECR_REPOSITORY_NAME}
          tag: latest
          path: app/
          use-buildkit: true

      - aws-cli/setup

      - run:
          name: docker login
          command: aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_REPO_URI}

      - run:
          name: docker tag and push
          command: docker tag ${AWS_ECR_REPOSITORY_NAME}:latest ${AWS_ECR_REPO_URI}/${AWS_ECR_REPOSITORY_NAME}:latest && docker push ${AWS_ECR_REPO_URI}/${AWS_ECR_REPOSITORY_NAME}:latest

      - aws-ecs/update_service:
          cluster: ${CLUSTER_NAME}
          family: 'app'
          service_name:  'circleci-dev-nlb'
          skip_task_definition_registration: true

# Invoke jobs via workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  dev:
    jobs:
      - build
      - docker_image:
          requires:
            - build
